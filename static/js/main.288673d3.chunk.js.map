{"version":3,"sources":["AllDogs.js","DogsList.js","App.js","serviceWorker.js","index.js"],"names":["northernDogs","DogsList","dogs","length","map","dog","key","console","log","App","state","filteredDogs","e","text","currentTarget","value","this","getFilteredDogsForText","setState","filter","toLowerCase","includes","id","type","placeholder","onInput","filterDogs","bind","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSAAaA,G,MAAe,CAC5B,mBACA,mBACA,UACA,iBACA,gBACA,iBACA,cACA,qCACA,iCACA,iCACA,iCACA,iBACA,mBACA,oBACA,4BACA,iBACA,eACA,0CACA,kBACA,iBCFeC,G,MAdE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACf,OAAGA,EAAKC,OAAS,EAET,4BACKD,EAAKE,KAAI,SAAAC,GAAG,OAAI,wBAAIC,IAAKD,GAAMA,OAKxC,iDCRRE,QAAQC,IAAIR,G,IAsCGS,E,kDAnCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,aAAcX,GAHL,E,uDAOFY,GACT,IAAMC,EAAOD,EAAEE,cAAcC,MACvBJ,EAAeK,KAAKC,uBAAuBJ,GACjDG,KAAKE,SAAS,CACZP,mB,6CAImBE,GACrB,OAAOb,EAAamB,QAAO,SAAAd,GAAG,OAAIA,EAAIe,cAAcC,SAASR,EAAKO,oB,+BAGlE,OACM,yBAAKE,GAAG,WACN,mDACA,2BAAOC,KAAK,SAASC,YAAY,WAAWC,QAAST,KAAKU,WAAWC,KAAKX,QAC1E,kBAAC,EAAD,CAAUd,KAAMc,KAAKN,MAAMC,eAC3B,gCACE,wCAEE,uBAAGiB,KAAK,+BAAR,uB,GA5BEC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.288673d3.chunk.js","sourcesContent":["export const northernDogs = [\n\"Alaskan Malamute\",\n\"Pies grenlandzki\",\n\"Samojed\",\n\"Siberian Husky\",\n\"Elkhund szary\",\n\"Elkhund czarny\",\n\"Jämthund\",\n\"Karelski pies na niedźwiedzie\",\n\"Łajka rosyjsko-europejska\",\n\"Łajka wschodnioeuropejska\",\n\"Łajka zachodnioeuropejska\",\n\"Szpic nordycki\",\n\"Norsk Lundenhund\",\n\"Szpic fiński\",\n\"Irlandzki szpic pasterski\",\n\"Lapinporokoira\",\n\"Norsk Buhund\",\n\"Suomenlapinkoira (Fiński lapphund)\",\n\"Svensk Lapphund\",\n\"Vasgotaspets\"\n];\n","import React from 'react';\nimport './DogsList.css';\n\n\nconst DogsList = ({dogs}) => {\n    if(dogs.length > 0){\n        return (\n            <ul>\n                {dogs.map(dog => <li key={dog}>{dog}</li>)}\n            </ul>\n        );\n    } \n    return (\n        <p>Brak wyników!</p>\n    );\n   \n};\n\nexport default DogsList;","import React from 'react';\nimport './App.css';\nimport { northernDogs } from './AllDogs';\nimport DogsList from './DogsList';\n\nconsole.log(northernDogs);\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      filteredDogs: northernDogs\n    };\n  }\n\n  filterDogs(e) {\n    const text = e.currentTarget.value;\n    const filteredDogs = this.getFilteredDogsForText(text)\n    this.setState({\n      filteredDogs\n    });\n  }\n\n  getFilteredDogsForText(text) {\n    return northernDogs.filter(dog => dog.toLowerCase().includes(text.toLowerCase()))\n  }\n  render() {\n    return (\n          <div id=\"wrapper\">\n            <h1>Psy Północy</h1>\n            <input type=\"search\" placeholder=\"Wyszukaj\" onInput={this.filterDogs.bind(this)} />\n            <DogsList dogs={this.state.filteredDogs}/>\n            <footer>\n              <p>\n              © 2020, \n                <a href=\"https://github.com/ustrojny\"> Ula Strojny</a>\n              </p>\n              </footer>\n          </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}